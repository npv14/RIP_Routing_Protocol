import time
import socket
import sys
import select
import random
import pickle
import copy
HOST = '127.0.0.1'
global routerId, currentTable, outPort
outPort = []

def open_file(fileName):
    "Open the filename"
    global routerId, currentTable
    table = {}
    flag1 = False
    flag2 = False
    flag3 = False
    f = open(fileName)
    infile = f.readlines()
    for i in infile:
        if "router-id" in i:
            routerId = i.split(' ')
            routerId = routerId[1]                              #Since router is always unique and only one
            routerId = check_router_id(routerId)
            flag1 = True
        if "input-port" in i:
            k = i.strip()
            inputPort = k.split(' ')
            inputPort = [i.strip(',') for i in inputPort[1:]]
            flag2 = True           
        if "outputs" in i:
            l = i.strip()
            currentTable = l.split(' ')
            currentTable = [i.strip(',') for i in currentTable[1:]]
            flag3 = True
    if (flag1 and flag2 and flag3 is False):
        print("Error in config file")
        return
    acceptedPort,rejectedPort = check_inputPort(inputPort)
    currentTable = check_outputs(currentTable,acceptedPort)  
    return (routerId,acceptedPort,currentTable)

def check_router_id(routerId):
    "Sanity check for the router ID"
    if int(routerId) >= 1 and int(routerId) <= 64000:
        return int(routerId)
    else:
        return "Invalid router Id"

def check_inputPort(inputPort):
    "Sanity check for the input port"
    acceptedPort = []
    rejectedPort = []
    inputPort = set(inputPort)
    for i in inputPort:
        try:
            i = int(i)
            if i >= 1024 and i <= 64000:
                acceptedPort.append(i)
            else:
                rejectedPort.append(i)
        except:
            rejectedPort.append(i)
    return(acceptedPort,rejectedPort)

def check_outputs(currentTable,acceptedPort):
    "Sanity check for the output"
    table = {}
    for i in currentTable:
        i = i.split('-')
        if int(i[0]) < 1024 and int(i[0]) > 64000:
            return "Invalid port range"
        if int(i[0]) in acceptedPort:
            print("Port same as input port")
            return "Port same as input port"
        table[int(i[2])] = [int(i[0]),int(i[1]), 0, 'True', 0]
        outPort.append(i[0])
    return table

def create_socket(acceptedPort):
    "Creates the socket"
    sockets = []
    try: 
        for i in acceptedPort:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.bind(("0.0.0.0", i))
            sockets.append(s)
        return sockets
    except socket.error as err: 
            print("socket creation failed with error %s" %(err))

def create_message(currentTable):
    "Creating the message"
    message = []
    version = "2"
    origin = routerId
    message.append(version)
    message.append(origin)
    message.append(currentTable)
    data = pickle.dumps(message)
    return data

def send_data(portNo, currentTable):
    "Sends the routing table to its destination port"
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)    
    data = create_message(currentTable)
    s.sendto(data,(HOST,portNo))

def receive(listSock, acceptedPort, Realoriginal):
    "Receives routing table from its neighbour"
    global routerId, currentTable
    original = copy.deepcopy(Realoriginal)
    Timeout = 1.0
    receive, _ , _ = select.select(listSock, [], [],Timeout)
    changed = False
    for sock in receive:
        changed = True
        data = sock.recvfrom(1024)  
        data = pickle.loads(data[0])
        #Pops own router Id if they exist in the routing table
        if routerId in data[2].keys():
            data[2].pop(routerId)
        senderPort = original[data[1]][0]
        #Pops the cost of the neighbour-(i)
        updateCost = [original[x][1] for x in original.keys() if x == data[1]].pop()
        if data[1] in original.keys():            
            if data[1] in currentTable.keys():
                #Compare with original table with current table
                if original[data[1]][1] < currentTable[data[1]][1]:
                    currentTable[data[1]][0] = original[data[1]][0]
                    currentTable[data[1]][1] = original[data[1]][1]
            else:
                #Puts a dead router back into the current table
                currentTable[data[1]] =  original[data[1]]
        for i in data[2].keys(): 
            #Add the popped cost from (i)     
            data[2][i][1] +=  updateCost
            if data[2][i][1] > 16:
                data[2][i][1] = 16
            #Poison the link if a link is down
            if (i in currentTable.keys() and data[2][i][3] == 'False' and currentTable[i][0] == senderPort):
                currentTable[i][1] = 16
                currentTable[i][3] = 'False'
            #Update the cost
            if i not in currentTable.keys() and data[2][i][1] < 16 and data[2][i][3] != 'False':
                data[2][i][0] = senderPort
                currentTable[i] =  data[2][i]
            if i in currentTable.keys():
                if(currentTable[i][1] > data[2][i][1]):
                    #Split horizon
                    if (currentTable[i][0] == senderPort) or (data[2][i][0] not in acceptedPort):
                        currentTable[i][0] = senderPort
                        currentTable[i][1] = data[2][i][1]      #Update cost if there is a lower cost 
        #Update the reachability
        for key in currentTable.keys():
            if key == data[1]:
                currentTable[key][3] = 'True'
                currentTable[key][2] = 0
                currentTable[key][1] = original[key][1]
            if key in data[2].keys():
                if currentTable[key][0] == senderPort and key != data[1]:
                    currentTable[key][3] = 'True'
                    currentTable[key][2] = 0
                    currentTable[key][1] = data[2][key][1]
    return changed, currentTable

def print_Routing_Table(routerId, currentTable):
    "This function prints out the routing table" 
    print('Routing table for router:', routerId)
    header = ('{:^10}||'.format('Router-ID') + '{:^10}||'.format('PortNum') + '{:^10}||'.format('Metric') + '{:^15}||'.format('Invalid Timer') +
    '{:^11}||'.format('Reachable') + '{:^15}||'.format('Garbage Timer'))
    print(header)
    for i in sorted(currentTable.keys()):
        line = '{:^10}||'.format(i) + '{:^10}||'.format(currentTable[i][0]) + '{:^10}||'.format(currentTable[i][1]) + '{:^15.3f}||'.format(currentTable[i][2]) + '{:^11}||'.format(currentTable[i][3]) +  '{:^15.3f}||'.format(currentTable[i][4])
        print(line)
    print("\n")
    print("\n")
    print("\n")

def main():
    "Main function"
    global currentTable, outPort
    try:
        fileName = sys.argv[1]
    except:
        print("ERROR: File not found")
    then = time.time()
    invalidTime = time.time()
    routerId,acceptedPort,currentTable = open_file(fileName)
    original = copy.deepcopy(currentTable)
    # Create sockets
    createdsocket = create_socket(acceptedPort) 
    timeUpdate = time.time()
    counter = 1
    while True:
        now = time.time() #Time after it finished
        list_garbage = [] 
        if now-then > 1:
            for i in currentTable.keys():
                currentTable[i][2] += now - then
                if currentTable[i][3] == 'False':
                    currentTable[i][4] += now - then
                if currentTable[i][3] == 'True':
                    currentTable[i][4] = 0
                if currentTable[i][4] > 15:
                    list_garbage.append(i)
            recieved = receive(createdsocket, acceptedPort, original)
            #
            for key in currentTable.keys():
                if currentTable[key][2] > 30:
                    currentTable[key][1] = 16
                if currentTable[key][2] > 40:
                    currentTable[key][3] = 'False'
                if currentTable[key][1] >= 16:
                    currentTable[key][3] = 'False'
            if recieved:
                #Delete rows of inactive routers
                for key in list_garbage:
                    if key in currentTable.keys():
                        currentTable.pop(key)
                print_Routing_Table(routerId, currentTable)
            for i in outPort:
                send_data(int(i), currentTable)
            then = now
            continue

if __name__ == "__main__":
    main()  